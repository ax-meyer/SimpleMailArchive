@page "/import-api"

@using SimpleMailArchiver.Data;
@using SimpleMailArchiver.Shared;
@using Microsoft.AspNetCore.WebUtilities;
@inject NavigationManager NavManager


@code {
    protected async override void OnInitialized()
    {
        if (Program.ImportRunning)
            return;
        Program.ImportRunning = true;
        Program.Logger.LogInformation("Starting api import");

        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        Program.Logger.LogInformation($"called URI \"{uri}\"");

        using var client = new System.Net.Http.HttpClient();
        client.Timeout = System.TimeSpan.FromSeconds(10);
        string callBackUrl = "";
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("callBackUrl", out var callback))
        {
            callBackUrl = callback.ToString().Trim().TrimEnd('/');

            Program.Logger.LogInformation($"callback url: \"{callBackUrl}\"");

            try
            {
                await HttpGetRetry(client, callBackUrl + "/start", 10, CancellationToken.None).ConfigureAwait(false);
            }
            catch (Exception ex)
            {
                Program.Logger.LogError($"Calling {callBackUrl} failed with error {ex.Message}");
                Program.ImportRunning = false;
                return;
            }
        }
        else
            Program.Logger.LogInformation("No callback url found");


        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("accountFilename", out var filename))
        {
            string accountFilename = filename.ToString().Trim().TrimEnd('/').TrimStart('/');
            Program.Logger.LogInformation($"API import for account file: \"{accountFilename}\"");

            if (Program.Config.Accounts.Any(acc => acc.AccountFilename == accountFilename))
            {
                try
                {
                    var progress = new ImportProgress();
                    await ImportMessages.ImportFromServer(accountFilename, progress).ConfigureAwait(false);

                    var msg = $"Import successful. Account {accountFilename}" +
                        $"\nParsed: {progress.ParsedMessageCount}" +
                        $"\nImported : {progress.ImportedMessageCount}" +
                        $"\nDeleted server: {progress.RemoteMessagesDeletedCount}" +
                        $"\nDeleted local: {progress.LocalMessagesDeletedCount}";

                    if (callBackUrl != string.Empty)
                        await HttpPostRetry(client, callBackUrl, msg, 10, CancellationToken.None).ConfigureAwait(false);
                    Program.Logger.LogInformation(msg);
                }
                catch (Exception ex)
                {
                    var errmsg = $"API import failed with error \"{ex.Message}\"";
                    Program.Logger.LogError(errmsg);

                    if (callBackUrl != string.Empty)
                        await HttpPostRetry(client, callBackUrl + "/fail", errmsg, 10, CancellationToken.None).ConfigureAwait(false);
                }
                finally
                {
                    Program.ImportRunning = false;
                }
            }
            else
            {
                var errmsg = $"No account found for \"{accountFilename}\". Check log at startup to see account loading errors";
                Program.Logger.LogError(errmsg);
                if (callBackUrl != string.Empty)
                    await HttpPostRetry(client, callBackUrl + "/fail", errmsg, 10, CancellationToken.None).ConfigureAwait(false);
            }
        }
        else
        {
            var errmsg = "No account filename provided, api import failed";
            Program.Logger.LogError(errmsg);

            if (callBackUrl != string.Empty)
                await HttpPostRetry(client, callBackUrl + "/fail", errmsg, 10, CancellationToken.None).ConfigureAwait(false);
        }

        Program.ImportRunning = false;

    }

    private async Task HttpGetRetry(HttpClient client, string url, int retries, CancellationToken token = default)
    {
        int counter = 0;
        bool retry = true;
        while(retry)
        {
            try
            {
                await client.GetAsync(url, token).ConfigureAwait(false);
                retry = false;
            }
            catch
            {
                if (++counter >= retries)
                    throw;
            }
        }
    }

    private async Task HttpPostRetry(HttpClient client, string url, string message, int retries, CancellationToken token = default)
    {
        int counter = 0;
        bool retry = true;
        while (retry)
        {
            try
            {
                await client.PostAsync(url, new StringContent(message), token).ConfigureAwait(false);
                retry = false;
            }
            catch
            {
                if (++counter >= retries)
                    throw;
            }
        }
    }

    }
