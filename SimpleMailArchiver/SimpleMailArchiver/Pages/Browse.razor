@page "/"
@page "/browse"
@using Microsoft.EntityFrameworkCore
@using SimpleMailArchiver.Data
@using System.Globalization

<PageTitle>Mail Archive</PageTitle>
@inject IDbContextFactory<ArchiveContext> DbContextFactory;

<h1>Mail Archive</h1>

<p>
    Folder:
    <select @bind="SelectedFolder">
        @foreach (var folder in _filterFolders)
        {
            <option value="@folder">@folder</option>
        }
    </select>
</p>

<p>
    Search:
    <input @bind="FilterString" placeholder="Type to search..." />
</p>

<p>Number of messages: @_numMessages</p>


<table class="table">
    <thead>
        <tr>
            @foreach (TableHeader header in Enum.GetValues(typeof(TableHeader)))
            {
                <th class="browse-table-header @header.ToString().ToLower()" @onclick="@(e => SortTable(header))">
                    @if (header == TableHeader.Attachments)
                    {
                        <p class="in-table">&#x1F4CE</p>
                    }
                    else
                    {
                        <p class="in-table">@header.ToString()</p>
                    }
                </th>
            }
        </tr>
    </thead>
    <tbody>
        <Virtualize @ref="_virtualizeComponent" ItemsProvider="@GetMessagesAsync" TItem="MailMessage" Context="message" ItemSize="50" OverscanCount="100">
            <ItemContent>
                <MailTableEntry Message="@message" @Onclick="() => DisplayMessage(message)" />
            </ItemContent>
            <Placeholder><p>Loading Message...</p></Placeholder>
        </Virtualize>
    </tbody>
</table>


@if (_showMessage)
{
    <DisplayMail Message="@_selectedMessage" OnClose="@DisplayMailClosing" />
}

@code {
    private int _numMessages;
    private ICollection<MailMessage>? Messages { get; set; }
    private bool _showMessage;
    private TableHeader _headerToSortBy = TableHeader.Date;
    private List<string> _filterFolders = new() { "All" };
    private string _selectedFolder = "All";
    private bool _sortAscending;
    private string _filterString = "";


#nullable enable
    private MailMessage? _selectedMessage;
    private event EventHandler? SearchEvent;
    private Virtualize<MailMessage>? _virtualizeComponent;
#nullable disable

    private string SelectedFolder
    {
        get => _selectedFolder;
        set
        {
            _selectedFolder = value;
            SearchEvent?.Invoke(null, EventArgs.Empty);
        }
    }

    private string FilterString
    {
        get => _filterString;
        set
        {
            _filterString = value;
            SearchEvent?.Invoke(null, EventArgs.Empty);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await using var context = await DbContextFactory.CreateDbContextAsync();
        _filterFolders.AddRange(await context.MailMessages.Select(m => m.Folder).Distinct().OrderBy(f => f).ToListAsync());
        SearchEvent += async (sender, e) => await MessageUpdate();
    }

    private async Task SortTable(TableHeader header)
    {
        if (_headerToSortBy == header)
            _sortAscending = !_sortAscending;
        else
            _headerToSortBy = header;
        await MessageUpdate();
    }

    private async Task MessageUpdate()
    {
        if (_virtualizeComponent != null)
            await _virtualizeComponent.RefreshDataAsync();
        StateHasChanged();
    }

    private async ValueTask<ItemsProviderResult<MailMessage>> GetMessagesAsync(ItemsProviderRequest request)
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        var msgs = context.MailMessages.AsQueryable();
        if (SelectedFolder != "All")
            msgs = msgs.Where(m => m.Folder == SelectedFolder);
        if (FilterString.Trim() != string.Empty)
            msgs = msgs.Where(m =>
            m.Subject.Contains(FilterString) ||
            m.Sender.Contains(FilterString) ||
            m.Recipient.Contains(FilterString) ||
            m.CcRecipient.Contains(FilterString) ||
            m.BccRecipient.Contains(FilterString) ||
            m.Date.ToString(CultureInfo.InvariantCulture).Contains(FilterString) ||
            m.Attachments.Contains(FilterString) ||
            m.Folder.Contains(FilterString) ||
            m.TextBody.Contains(FilterString));

        _numMessages = await msgs.CountAsync();
        StateHasChanged();
        var ms = msgs.OrderBy(_headerToSortBy.ToString(), _sortAscending).Skip(request.StartIndex).Take(request.Count).ToArray();
        return new ItemsProviderResult<MailMessage>(ms, _numMessages);
    }

    private void DisplayMessage(MailMessage message)
    {
        if (message == null) throw new ArgumentNullException(nameof(message));
        _selectedMessage = message;
        _showMessage = true;
    }

    private void DisplayMailClosing() => _showMessage = false;

}
