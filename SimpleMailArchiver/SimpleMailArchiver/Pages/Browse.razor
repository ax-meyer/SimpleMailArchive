@page "/"
@page "/browse"
@using System.Text.Json
@using Radzen
@using Radzen.Blazor
@using SimpleMailArchiver.Data
@using Microsoft.AspNetCore.Components.Web
@using SimpleMailArchiver.Shared

<PageTitle>Mail Archive</PageTitle>
@inject ArchiveContext DbContext;

<h1>Mail Archive</h1>

<RadzenDataGrid AllowPaging="@true" AllowSorting="@true" AllowFiltering="@true" FilterMode="FilterMode.Simple"
                Data="@_messages">
    <Columns>
        <RadzenDataGridColumn Property="@nameof(MailMessage.Date)" Title="Date"/>
        <RadzenDataGridColumn Property="@nameof(MailMessage.Subject)" Title="Subject"/>
        <RadzenDataGridColumn Property="@nameof(MailMessage.Sender)" Title="Sender"/>
        <RadzenDataGridColumn Property="@nameof(MailMessage.Recipient)" Title="Recipient"/>
        <RadzenDataGridColumn Property="@nameof(MailMessage.Folder)" Title="Folder"
                              FilterMode="FilterMode.CheckBoxList"/>
        <RadzenDataGridColumn Property="@nameof(MailMessage.HasAttachments)" Sortable="@false" Filterable="@false">
            <HeaderTemplate>
                <RadzenIcon Icon="attach_file"/>
            </HeaderTemplate>
            <Template>
                @{
                    var numberOfAttachments = context.NumberOfAttachments;
                    if (numberOfAttachments is null or 0)
                    {
                        <RadzenIcon Icon="close"/>
                    }
                    else
                    {
                        <RadzenIcon Icon="check"/>
                        <p class="in-table">(@numberOfAttachments)</p>
                    }
                }
            </Template>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>

@if (_showMessage)
{
    <DisplayMail Message="@_selectedMessage" OnClose="@DisplayMailClosing"/>
}

@code {
    private IQueryable<MailMessage>? _messages;
    private bool _showMessage;

    private MailMessage? _selectedMessage;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _messages = DbContext.MailMessages;
    }

    private void DisplayMessage(MailMessage message)
    {
        _selectedMessage = message ?? throw new ArgumentNullException(nameof(message));
        _showMessage = true;
    }

    private void DisplayMailClosing() => _showMessage = false;
}
