@page "/import-server"
@using System.Diagnostics
@using SimpleMailArchiver.Data
@using SimpleMailArchiver.Services.MessageImportService
@using Microsoft.AspNetCore.Components.Web
@using SimpleMailArchiver.Shared

@inject MessageImportService MessageImportService;
@inject ILoggerFactory LoggerFactory;
@inject ApplicationContext AppContext;


<PageTitle>Import mail from online account</PageTitle>

<h1>Import from mailserver</h1>

<p>
    Select account:
    <select @bind="_selectedAccountFilename">
        @foreach (var acc in AppContext.Accounts)
        {
            <option value="@acc.AccountFilename">@acc.AccountDisplayName</option>
        }
    </select>
</p>

<p>
    <button class="btn btn-primary" @onclick="() => Task.Run(ImportFromAccount)" disabled="@AppContext.ImportRunning">Import from selected account</button>
    <button class="btn btn-primary" @onclick="Cancel">Cancel</button>
</p>

<p role="status">@AppContext.ImportProgress?.InfoMessage</p>
<table class="table-responsive">
    <tr>
        <td>Current Folder</td>
        <td style="padding-left: 10px !important">@AppContext.ImportProgress?.CurrentFolder</td>
    </tr>
    <tr>
        <td>Processed messages</td>
        <td style="padding-left: 10px !important">@AppContext.ImportProgress?.ParsedMessageCount</td>
    </tr>
    <tr>
        <td>Imported messages</td>
        <td style="padding-left: 10px !important">@AppContext.ImportProgress?.ImportedMessageCount</td>
    </tr>
    <tr>
        <td>Messages deleted on server</td>
        <td style="padding-left: 10px !important">@AppContext.ImportProgress?.RemoteMessagesDeletedCount</td>
    </tr>
    <tr>
        <td>Messages deleted locally</td>
        <td style="padding-left: 10px !important">@AppContext.ImportProgress?.LocalMessagesDeletedCount</td>
    </tr>
</table>

@if (AppContext.ImportRunning)
{
    <ImportDialog Progress="@AppContext.ImportProgress" OnCancel="@Cancel" />
}


@code {
    private string? _selectedAccountFilename;
    private CancellationTokenSource? _ctSource;

    protected override void OnInitialized()
    {
        _selectedAccountFilename = AppContext.Accounts.FirstOrDefault()?.AccountFilename;
        base.OnInitialized();
    }

    private void Cancel() => _ctSource?.Cancel();

    private async Task ImportFromAccount()
    {
        if (AppContext.ImportRunning)
            return;
        AppContext.ImportProgress = new ImportProgress(LoggerFactory);
        _ctSource = new CancellationTokenSource();
        AppContext.ImportProgress.Ct = _ctSource.Token;
        AppContext.ImportRunning = true;

        await InvokeAsync(StateHasChanged);

        var watch = new Stopwatch();
        var fmt = @"hh\:mm\:ss";

        try
        {
            AppContext.ImportProgress.InfoMessage = "Import starting, please wait...";
            if (_selectedAccountFilename == null)
                throw new ArgumentException("No valid account selected.");

            watch.Start();
            var mailTask = MessageImportService.ImportFromServer(_selectedAccountFilename, AppContext.ImportProgress);

            while (!mailTask.IsCompleted)
            {
                AppContext.ImportProgress.InfoMessage = $"Import running, duration {watch.Elapsed.ToString(fmt)}, please wait...";
                await InvokeAsync(StateHasChanged);
                Thread.Sleep(1000);
            }
            await mailTask;
            AppContext.ImportProgress.InfoMessage = $"Import finished after {watch.Elapsed.ToString(fmt)}";
        }
        catch (OperationCanceledException)
        {
            AppContext.ImportProgress.InfoMessage = $"Import was cancelled after {watch.Elapsed.ToString(fmt)}.";
        }
        catch (InvalidDataException)
        {
            AppContext.ImportProgress.InfoMessage = "Import failed: Internal error: Hash Mismatch";
        }
        catch (ArgumentException ex)
        {
            AppContext.ImportProgress.InfoMessage = $"Import failed: {ex.Message}";
        }
        catch (Exception ex)
        {
            AppContext.ImportProgress.InfoMessage = $"Import failed with unexpected Error: {ex.Message}";
        }
        finally
        {
            AppContext.ImportRunning = false;
            await InvokeAsync(StateHasChanged);
        }
    }
}
